package com.dimovsoft.st25dv_i2c.dataimport com.dimovsoft.st25dv_i2c.security.SecurityManagerimport com.dimovsoft.st25dv_i2c.models.Credentialsimport io.realm.kotlin.Realmimport io.realm.kotlin.RealmConfigurationimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass RealmDatabase(security: SecurityManager) {	private var database: Realm	init {		val config = RealmConfiguration.Builder(schema = setOf(Credentials::class))			.encryptionKey(security.getDbEncryptionKey())			.build()		database = Realm.open(config)		if (database.query(Credentials::class).first().find() == null) { // No credentials?			fetchInitialCredentials()		}	}	fun getPasswordForUser(username: String): String? {		return database			.query(Credentials::class, "username == $0", username)			.first()			.find()			?.password	}	private fun fetchInitialCredentials() {		//MOCK: Insert dummy credentials for demonstration purposes. Should not be in release		CoroutineScope(Dispatchers.IO).launch {			database.write {				val dummyCredentials = Credentials().apply {					username = "user"					password = "1234"				}				copyToRealm(dummyCredentials)			}		}	}}