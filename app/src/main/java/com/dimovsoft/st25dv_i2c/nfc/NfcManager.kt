package com.dimovsoft.st25dv_i2c.nfcimport android.nfc.Tagimport android.util.Logimport com.dimovsoft.st25dv_i2c.data.DatabaseRepositoryimport com.dimovsoft.st25dv_i2c.util.getRandomimport com.st.smartaglib.SmarTagimport com.st.smartaglib.model.SensorDataSampleimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport org.koin.java.KoinJavaComponent.injectimport java.io.IOExceptionimport java.util.Dateclass NfcManager {	private val repository: DatabaseRepository by inject(DatabaseRepository::class.java)	/**	 * Adding new random values to DB mocking real reading occurred. For testing purposes only.	 */	fun mockReceivingSamples() {		CoroutineScope(Dispatchers.IO).launch {			while (true) {				repository.saveDataSample(					SensorDataSample(Date(),						SmarTag.TEMPERATURE_RANGE_C.getRandom(),						SmarTag.PRESSURE_RANGE_MBAR.getRandom(),						SmarTag.HUMIDITY_RANGE.getRandom(),						SmarTag.ACCELERATION_RANGE_MG.getRandom()))				delay(10000)			}		}	}	/**	 * New tag detected. Should read data from it.	 */	fun tagDiscovered(tag: Tag) {		Log.d("NfcManager", "Tag discovered: ${tag.id}")		ST25DVTag.get(tag)?.let {			readDataSample(SmarTag(it))		}	}	/**	 * Read data from the tag. Only simple data samples are handled here. Should be much more types finally.	 */	private fun readDataSample(tag: SmarTag) {		try {			tag.readDataSample(				onReadNumberOfSample = { numberOfSample ->					//TODO: Handle multiple samples				},				onReadSample = {					when (it) {						is SensorDataSample -> repository.saveDataSample(it)						//is EventDataSample ->  TODO: Handle events						else -> Log.e("NfcManager", "Unhandled sample received")					}				}			)		} catch (e: IOException) {			Log.e("NfcManager", "Error reading")		}	}}